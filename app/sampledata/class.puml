@startuml

SimpleCalculatorActivity --> InputContract : "inputContract"
EventListener <|.. MainActivity
Calc --> EventListener : "event"
Calc --> State : "state"
State --> StateContract
Operation -- Calc
InputContract <|.. Calc
StateContract <|.. Calc

State <|.. BaseClearNumState
BaseClearNumState <|-- BaseInputNumState
BaseInputNumState <|-- InputNumAState
BaseInputNumState <|-- InputNumBState
BaseClearNumState <|-- OperationState
BaseClearNumState <|-- ResultState

class SimpleCalculatorActivity {
- ArrayMap<Integer, Integer> numMap
- ArrayMap<Integer, Operation> opeMap
+ sendMessage(View view)
- setNumMap()
- setOpeMap()
- updateDisplayNum(String)
}

interface State {
+ {abstract} InputNum(int, StateContract)
+ {abstract} InputOpe(Operation, StateContract)
+ {abstract} InputEqual(StateContract)
+ {abstract} InputDec(StateContract)
+ {abstract} InputPer(StateContract)
+ {abstract} InputDot(StateContract)
+ {abstract} InputClear(StateContract)
+ {abstract} InputAllClear(StateContract)
}

abstract class BaseClearNumState {
+ InputAllClear(StateContract)
}

abstract class BaseInputNumState {
+ InputNum(int, StateContract)
+ InputDec(StateContract)
+ InputPer(StateContract)
+ InputDot(StateContract)
+ InputClear(StateContract)
+ {abstract} setNum(StateContract)
}

class InputNumAState {
+ InputOpe(Operation, StateContract)
+ InputEqual(StateContract)
+ setNum(StateContract)
}
class InputNumBState {
+ InputOpe(Operation, StateContract)
+ InputEqual(StateContract)
+ setNum(StateContract)
}
class OperationState {
+ InputNum(int, StateContract)
+ InputOpe(Operation, StateContract)
+ InputEqual(StateContract)
+ InputDec(StateContract)
+ InputPer(StateContract)
+ InputDot(StateContract)
+ InputClear(StateContract)
}
class ResultState {
+ InputNum(int, StateContract)
+ InputOpe(Operation, StateContract)
+ InputEqual(StateContract)
+ InputDec(StateContract)
+ InputPer(StateContract)
+ InputDot(StateContract)
+ InputClear(StateContract)
}

interface InputContract {
+ {abstract} onInputNum(int)
+ {abstract} onInputOpe(Operation)
+ {abstract} onInputEqual() /' tesuto '/
+ {abstract} onInputDec()
+ {abstract} onInputPer()
+ {abstract} onInput()
+ {abstract} onInputClear()
+ {abstract} onInputAllClear()
+ {abstract} setEventListner(EventListener)
}

interface StateContract {

+ changeState(State)
+ State getState()
+ void setNumA();Dot
+ void setNumB();
+ void setDisplayNum(int);
+ void setOperation(Operation);
+ void updateDisp();
+ void updateDecToDisplayNum();
+ void updatePerToDisplay();
+ void clearDisp();
+ void allClearNum();

}
class Calc {
- BigDecimal numA
- BigDecimal numB
- String displayNum
- Operation ope
}

interface EventListener {
+ updateDisp(String)
}

enum Operation {
+ PLUS
+ MINUS
+ MULTI
+ DIV
+ BigDecimal eval(BigDecimal, BigDecimal)
}

note right of SimpleCalculatorActivity
    numMap：ボタン用ArrayMap
    opeMap：四則演算用ArrayMap
end note

note right of Calc
    電卓関連の処理は本クラスで実施。
    Stateによって処理が変わる。
end note

@enduml